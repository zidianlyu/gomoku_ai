{"version":3,"sources":["components/board/image/board.png","types/game.ts","types/role.ts","utils/screen.ts","components/provider/Context.tsx","components/board/cell/Cell.tsx","components/board/cell/Cell.style.ts","components/board/Board.tsx","components/board/Board.style.ts","components/footer/Footer.tsx","components/footer/Footer.style.ts","components/share/Gap.tsx","components/header/dialog/Dialog.tsx","components/header/dialog/Dialog.style.ts","components/header/Header.style.ts","components/header/Header.tsx","components/analyzer/Analyzer.tsx","components/analyzer/Analyzer.style.ts","components/app/App.style.ts","components/app/App.tsx","serviceWorker.ts","types/direction.ts","types/score.ts","constants/theme.ts","constants/ai.ts","utils/control.ts","constants/game.ts","constants/score.ts","utils/evaluate/point.ts","utils/generator.ts","utils/next.ts","utils/validator.ts","models/zobrist.ts","models/board.ts","models/timer.ts","models/search-cache.ts","utils/math.ts","models/negamax.ts","components/provider/Provider.tsx","index.tsx"],"names":["module","exports","GameMode","GameStatus","AiLevel","Role","pageMaxWidth","theme","maxWidth","spacing","breakpoints","down","React","createContext","Cell","row","col","this","context","board","Empty","status","Open","aiThinking","placeChess","Over","openDialog","props","classes","color","backgroundColor","label","shadow","boxShadow","shadows","Grid","container","justify","alignItems","className","cell","style","onClick","_placeChess","Component","contextType","Context","withStyles","createStyles","borderRadius","cursor","fontSize","fontWeight","height","lineHeight","transition","width","withTheme","BoardComponent","rowIdx","map","displayStep","colIdx","key","displayBoard","direction","Row","boardWrapper","boardImage","chessSteps","src","BoardImage","alt","ChessBoard","palette","common","black","padding","overflow","LINKS","name","link","icon","faIdBadge","faLinkedin","faGithub","Footer","isXs","footer","idx","item","xs","Button","button","fullWidth","href","startIcon","size","variant","Typography","withWidth","textTransform","VerticalGap","GameDialog","paperFullWidth","margin","Dialog","DialogComponent","state","aiLevel","easy","firstHand","Human","gameMode","VsAgent","setState","event","Number","target","value","startNewGame","closeDialog","text","onClose","onEnter","resetDialog","open","dialogOpen","DialogTitle","teal","DialogContent","GameModeOptions","FirstHandOptions","DifficultyOption","DialogActions","sm","FormControl","component","FormLabel","RadioGroup","onChange","handleGameModeChange","FormControlLabel","control","Radio","Label","labelPlacement","VsHuman","handleFirstHandChange","Agent","handleAiLevelChange","medium","hard","Header","header","Top","Instruction","yellow","stepCount","winner","role","mode","twoPlayersWinColor","title","notice","chess","nextTurnColorNotice","align","nextStepCountNotice","message","textMessage","IconButton","stepBackward","disabled","recordedSteps","length","NavigateBefore","stepForward","backwardSteps","NavigateNext","FilterTiltShift","blue","shape","white","background","paddingLeft","AnalyzerComponent","analyzer","disableRipple","BlurOn","score","timer","prefix","aiScore","aiTimer","App","app","paper","CssBaseline","Fade","in","timeout","Paper","elevation","square","Divider","Analyzer","marginTop","marginBottom","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","catch","error","Direction","MoveDirection","Score","Gap","BlockCount","SameCount","createMuiTheme","primary","main","secondary","amber","pink","danger","red","TIME_LIMIT","SPREAD_LIMIT","SEARCH_DEPTH","getFiveConsecutivePoints","currentRow","currentCol","currentRole","consecutivePoints","withinBound","Col","Des","Asc","moveDirection","r","push","getWinner","gameBoard","i","j","winPoints","POINT_SCORE_MAP","Zero","One","Two","Three","Four","BlockedOne","BlockedTwo","BlockedThree","BlockedFour","Five","Six","Seven","Eight","reinforceScore","scorePoint","emptyRoleIndex","blockRoleCount","sameRoleCount","gapCount","gap","Default","getGap","blockRoleMap","sameRoleMap","evaluatePoint","scoreCache","totalScore","resetCount","hasSameRole","nextRow","nextCol","undefined","Infinity","targetRole","buildBoard","buildStep","point","humanScore","agentScore","buildGameState","Board","buildTimer","Date","nextRole","shouldConsiderStep","heuristicStep","steps","curRow","curCol","step","endRow","endCol","Math","abs","deltaX","deltaY","engine","MersenneTwister19937","autoSeed","Zobrist","hashCode","_random","agentStepTags","humanStepTags","reset","integer","zobrist","optionalSteps","agentScores","humanScores","placeCount","cleanCount","_updateRoleBoardScore","buildDisplayBoard","buildScoreCache","openBoard","count","getStepCount","_initScore","_hasNeighbor","points","isBlack","_updateDisplayBoard","updateHashCode","_updateScoreOnMoveDirection","pop","countStep","cleanChess","radius","emptyCount","rowB","colA","colB","agentMaxScore","humanMaxScore","isOnlyThrees","applyStarSpread","floor","BOARD_SIZE","fives","neighbors","attackSteps","defendSteps","agentFours","agentBlockedFours","agentDoubleThrees","agentThrees","agentTwos","humanFours","humanBlockedFours","humanDoubleThrees","humanThrees","humanTwos","_updateStepsOnSkipLayers","maxScore","max","lastStep","unshift","fours","concat","blockedFours","result","twos","sort","a","b","slice","Timer","searchStartTime","consumed","SearchCache","cache","searchRecord","searchDepth","boardScore","alphaBetaPrune","searchPoint","depth","record","equalTo","greaterThanOrEqualTo","greaterThan","lessThanOrEqualTo","lessThan","NegaMax","searchCache","leafCount","searchRecordCount","tooDeepCount","lowScoreCount","normalCount","callCount","alphaCount","_getBestSearchRecord","alpha","beta","spread","currentSearchPoint","get","evaluateBoard","leaf","heuristicSteps","heuristicEvaluate","bestSearchRecord","Min","nextDepth","nextSpread","nextSteps","Max","set","_getAlpha","expired","_depthSearch","bestScore","heuristicSearchRecords","heuristicStepA","heuristicStepB","getSearchStep","Provider","_closeDialog","_openDialog","_humanPlaceChess","_initNewGame","_stepBackward","_stepForward","_agentPlaceChess","updateWinPoints","nextState","setTimeout","searchStep","aiRow","aiCol","_updateState","children","ReactDOM","render","document","getElementById","URL","process","origin","addEventListener","fetch","response","contentType","headers","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.885668be.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/board.42ec9618.png\";","/** Model. */\nimport Board from '../models/board';\n\n/** Types. */\nimport {Role} from './role';\nimport {Winner} from './board';\n\nexport enum GameMode {\n  VsHuman,\n  VsAgent,\n}\n\nexport enum GameStatus {\n  Open,\n  Over,\n}\n\nexport interface GameMutationState {\n  aiTimer: number;\n  aiScore: number;\n  aiThinking: boolean;\n  board: Board;\n  role: Role;\n  status: GameStatus;\n  winner: Winner;\n}\n\nexport interface GameState extends GameMutationState {\n  aiLevel: AiLevel;\n  firstHand: Role;\n  mode: GameMode;\n}\n\nexport enum AiLevel {\n  easy = 4,\n  medium = 6,\n  hard = 8,\n}\n","export enum Role {\n  Empty,\n  Agent,\n  Human,\n}\n","import {Theme} from '@material-ui/core';\n\n/***************\n * Screen Util *\n ***************/\nconst SM_SCREEN_1 = 560;\nconst SM_SCREEN_2 = 450;\nexport const MOBILE_SCREEN = 380;\n\nexport const pageMaxWidth = (theme: Theme) => ({\n  maxWidth: theme.spacing(69),\n  [theme.breakpoints.down(SM_SCREEN_1)]: {\n    maxWidth: theme.spacing(52),\n  },\n  [theme.breakpoints.down(SM_SCREEN_2)]: {\n    maxWidth: theme.spacing(48),\n  },\n  [theme.breakpoints.down(MOBILE_SCREEN)]: {\n    maxWidth: 'inherit',\n  },\n});\n","/*********************\n * Context Component *\n *********************/\nimport React from 'react';\n\nexport default React.createContext({});\n","/******************\n * Cell Component *\n ******************/\nimport React from 'react';\n\n/** Components. */\nimport {Grid} from '@material-ui/core';\n\n/** Styles. */\nimport {withStyles, withTheme} from '@material-ui/styles';\n\nimport Context from '../../provider/Context';\nimport STYLE from './Cell.style';\nimport {GameStatus} from '../../../types/game';\nimport {Role} from '../../../types/role';\n\ninterface CellProps {\n  theme: any;\n  classes: {\n    cell: string;\n  };\n  row: number;\n  col: number;\n  color: string;\n  backgroundColor: string;\n  label: number;\n  shadow: number;\n}\n\nclass Cell extends React.Component<CellProps> {\n  _placeChess(row: number, col: number): void {\n    if (\n      this.context.board.board[row][col] === Role.Empty &&\n      this.context.status === GameStatus.Open &&\n      !this.context.aiThinking\n    ) {\n      this.context.placeChess(row, col);\n    }\n    if (this.context.status === GameStatus.Over) {\n      this.context.openDialog();\n    }\n  }\n\n  render() {\n    const {\n      classes,\n      theme,\n      row,\n      col,\n      color,\n      backgroundColor,\n      label,\n      shadow,\n    } = this.props;\n\n    // Styles\n    const boxShadow = theme.shadows[shadow];\n    return (\n      <Grid\n        container\n        justify='center'\n        alignItems='center'\n        className={classes.cell}\n        style={{backgroundColor, color, boxShadow}}\n        onClick={() => this._placeChess(row, col)}>\n        {label ? label : ''}\n      </Grid>\n    );\n  }\n}\n\nCell.contextType = Context;\nexport default withStyles(STYLE)(withTheme(Cell));\n","import {createStyles, Theme} from '@material-ui/core';\n\nconst SM_SIZE = 24;\nconst MOBILE_SIZE = 17;\nexport default (theme: Theme) =>\n  createStyles({\n    cell: {\n      borderRadius: '50%',\n      cursor: 'pointer',\n      fontSize: 12,\n      fontWeight: 400,\n      height: SM_SIZE,\n      lineHeight: 0,\n      transition: 'all 500ms',\n      width: SM_SIZE,\n      [theme.breakpoints.down('xs')]: {\n        fontSize: 9,\n        height: MOBILE_SIZE,\n        width: MOBILE_SIZE,\n      },\n    },\n  });\n","/******************\n * Board Component *\n ******************/\nimport React, {ReactElement} from 'react';\n\n/** Styles. */\nimport {withStyles} from '@material-ui/styles';\nimport STYLE from './Board.style';\n\n/** Components. */\nimport {Grid} from '@material-ui/core';\nimport Cell from './cell/Cell';\nimport Context from '../provider/Context';\nimport BoardImage from './image/board.png';\n\n/** Model */\nimport Board from '../../models/board';\nimport {DisplayStep} from '../../types/board';\n\ninterface BoardProps {\n  classes: {\n    board: string;\n    boardWrapper: string;\n    boardImage: string;\n    chessSteps: string;\n  };\n}\n\nclass BoardComponent extends React.Component<BoardProps> {\n  Row(row: DisplayStep[], rowIdx: number): ReactElement[] {\n    return row.map(\n      (displayStep: DisplayStep, colIdx: number): ReactElement => {\n        const {color, backgroundColor, label, shadow} = displayStep;\n        return (\n          <Cell\n            key={colIdx}\n            row={rowIdx}\n            col={colIdx}\n            color={color}\n            backgroundColor={backgroundColor}\n            label={label}\n            shadow={shadow}\n          />\n        );\n      }\n    );\n  }\n\n  ChessBoard(displayBoard: DisplayStep[][]): ReactElement[] {\n    return displayBoard.map(\n      (row: DisplayStep[], rowIdx: number): ReactElement => (\n        <Grid\n          container\n          key={rowIdx}\n          className='board-row'\n          direction='row'\n          justify='space-between'>\n          {this.Row(row, rowIdx)}\n        </Grid>\n      )\n    );\n  }\n\n  render(): ReactElement {\n    const {boardWrapper, boardImage, board, chessSteps} = this.props.classes;\n    const {displayBoard}: Board = this.context.board;\n    return (\n      <Grid\n        container\n        direction='column'\n        alignItems='center'\n        spacing={3}\n        className={boardWrapper}>\n        <Grid className={board}>\n          <Grid className={boardImage}>\n            <img src={BoardImage} alt='board' />\n          </Grid>\n          <Grid\n            className={chessSteps}\n            container\n            justify='center'\n            alignItems='center'>\n            {this.ChessBoard(displayBoard)}\n          </Grid>\n        </Grid>\n      </Grid>\n    );\n  }\n}\nBoardComponent.contextType = Context;\n\nexport default withStyles(STYLE)(BoardComponent);\n","import {createStyles, Theme} from '@material-ui/core';\nimport {MOBILE_SCREEN} from '../../utils/screen';\n\nexport default (theme: Theme) =>\n  createStyles({\n    boardWrapper: {\n      color: theme.palette.common.black,\n      padding: theme.spacing(2.5, 2),\n    },\n    board: {\n      [theme.breakpoints.down(MOBILE_SCREEN)]: {\n        height: 367,\n        width: 367,\n      },\n      height: 535,\n      overflow: 'hidden',\n      position: 'relative',\n      width: 535,\n    },\n    boardImage: {\n      '& img': {\n        height: '100%',\n        width: '100%',\n      },\n      borderRadius: 4,\n      height: '100%',\n      overflow: 'hidden',\n    },\n    chessSteps: {\n      [theme.breakpoints.down(MOBILE_SCREEN)]: {\n        padding: theme.spacing(1 / 8),\n      },\n      height: '100%',\n      padding: theme.spacing(0, 1 / 8),\n      position: 'absolute',\n      top: 0,\n      width: '100%',\n    },\n  });\n","/********************\n * Footer Component *\n ********************/\nimport React from 'react';\n\n/** Icons. */\nimport {\n  faGithub,\n  faLinkedin,\n  IconDefinition,\n} from '@fortawesome/free-brands-svg-icons';\nimport {faIdBadge} from '@fortawesome/free-solid-svg-icons';\nimport {FontAwesomeIcon} from '@fortawesome/react-fontawesome';\n\n/** Components. */\nimport {Button, Grid, Typography, withWidth} from '@material-ui/core';\n\n/** Styles. */\nimport {withStyles} from '@material-ui/styles';\nimport STYLE from './Footer.style';\n\ninterface Link {\n  name: string;\n  link: string;\n  icon: IconDefinition;\n}\n\nconst LINKS: Link[] = [\n  {name: 'Profile', link: 'https://www.zidianlyu.com', icon: faIdBadge},\n  {\n    name: 'LinkedIn',\n    link: 'https://www.linkedin.com/in/zidianlyu/',\n    icon: faLinkedin,\n  },\n  {name: 'Github', link: 'https://github.com/zidianlyu', icon: faGithub},\n];\n\ninterface FooterProps {\n  classes: {\n    button: string;\n    footer: string;\n  };\n  width: string;\n}\n\nclass Footer extends React.Component<FooterProps> {\n  render() {\n    const {classes, width} = this.props;\n    const isXs = width === 'xs';\n    return (\n      <Grid\n        className={classes.footer}\n        container\n        direction='row'\n        justify='space-between'\n        spacing={1}>\n        {LINKS.map(({name, link, icon}, idx) => (\n          <Grid item xs={4} key={idx}>\n            <Button\n              className={classes.button}\n              color='primary'\n              fullWidth\n              href={link}\n              startIcon={<FontAwesomeIcon icon={icon} size='sm' />}\n              variant='contained'>\n              <Typography variant={isXs ? 'button' : 'h6'}>{name}</Typography>\n            </Button>\n          </Grid>\n        ))}\n      </Grid>\n    );\n  }\n}\n\nexport default withWidth()(withStyles(STYLE)(Footer));\n","import {Theme, createStyles} from '@material-ui/core';\n\nexport default (theme: Theme) =>\n  createStyles({\n    button: {\n      boxShadow: theme.shadows[0],\n      fontWeight: 500,\n      textTransform: 'initial',\n      [theme.breakpoints.down('xs')]: {\n        textTransform: 'uppercase',\n      },\n    },\n    footer: {\n      padding: theme.spacing(1.5),\n      [theme.breakpoints.down('xs')]: {\n        padding: theme.spacing(1),\n      },\n    },\n  });\n","import React, {ReactElement} from 'react';\n\nexport const VerticalGap = ({size}: any): ReactElement => {\n  let height = 12;\n  switch (size) {\n    case 'lg':\n      height = 36;\n      break;\n    case 'md':\n      height = 12;\n      break;\n    case 'sm':\n      height = 8;\n      break;\n    case 'xs':\n      height = 4;\n      break;\n    default:\n      break;\n  }\n  return <div style={{height, width: 1}}></div>;\n};\n\nexport const HorizontalGap = ({size}: any): ReactElement => {\n  let width = 12;\n  switch (size) {\n    case 'lg':\n      width = 36;\n      break;\n    case 'md':\n      width = 12;\n      break;\n    case 'sm':\n      width = 8;\n      break;\n    case 'xs':\n      width = 4;\n      break;\n    default:\n      break;\n  }\n  return <div style={{width, height: 1}}></div>;\n};\n","/********************\n * Header Component *\n ********************/\nimport React, {ReactElement} from 'react';\n\n/** Components. */\nimport {\n  Button,\n  Dialog,\n  DialogActions,\n  DialogContent,\n  DialogTitle,\n  FormControl,\n  FormControlLabel,\n  FormLabel,\n  Grid,\n  Radio,\n  RadioGroup,\n  Typography,\n  withWidth,\n} from '@material-ui/core';\nimport {teal} from '@material-ui/core/colors';\n\n/** Styles. */\nimport {createStyles, Theme, withStyles} from '@material-ui/core/styles';\n\n/** Types */\nimport {AiLevel, GameMode} from '../../../types/game';\nimport {Role} from '../../../types/role';\n\n/** Components. */\nimport Context from '../../provider/Context';\nimport {VerticalGap} from '../../share/Gap';\n\n/** Constants. */\nimport STYLE from './Dialog.style';\n\ninterface DialogProps {\n  classes: {\n    button: string;\n    label: string;\n  };\n  width: string;\n}\n\ninterface DialogState {\n  aiLevel: AiLevel;\n  firstHand: Role;\n  gameMode: GameMode;\n}\n\nconst GameDialog = withStyles((theme: Theme) =>\n  createStyles({\n    paperFullWidth: {\n      width: 360,\n      [theme.breakpoints.down('xs')]: {\n        margin: 0,\n        width: 300,\n      },\n    },\n  })\n)(Dialog);\n\nclass DialogComponent extends React.Component<DialogProps, DialogState> {\n  state = {\n    aiLevel: AiLevel.easy,\n    firstHand: Role.Human,\n    gameMode: GameMode.VsAgent,\n  };\n\n  setGameMode(gameMode: GameMode): void {\n    this.setState({gameMode});\n  }\n\n  handleGameModeChange(event: React.ChangeEvent<HTMLInputElement>): void {\n    const gameMode: GameMode = Number(event.target.value);\n    this.setState({gameMode});\n  }\n\n  handleFirstHandChange(event: React.ChangeEvent<HTMLInputElement>): void {\n    const firstHand: Role = Number(event.target.value);\n    this.setState({firstHand});\n  }\n\n  handleAiLevelChange(event: React.ChangeEvent<HTMLInputElement>): void {\n    const aiLevel: AiLevel = Number(event.target.value);\n    this.setState({aiLevel});\n  }\n\n  startNewGame(): void {\n    const {aiLevel, firstHand, gameMode}: DialogState = this.state;\n    this.context.startNewGame(gameMode, firstHand, aiLevel);\n    this.context.closeDialog();\n  }\n\n  resetDialog(): void {\n    this.setState({\n      aiLevel: AiLevel.easy,\n      firstHand: Role.Human,\n      gameMode: GameMode.VsAgent,\n    });\n  }\n\n  Label(text: string): ReactElement {\n    return <Typography variant='body2'>{text}</Typography>;\n  }\n\n  get GameModeOptions(): ReactElement {\n    const {gameMode} = this.state;\n    const {label} = this.props.classes;\n    return (\n      <FormControl component='fieldset'>\n        <FormLabel component='legend'>\n          <Typography variant='button'>Game Mode</Typography>\n        </FormLabel>\n        <RadioGroup\n          value={gameMode}\n          onChange={(event) => this.handleGameModeChange(event)}\n          row>\n          <FormControlLabel\n            className={label}\n            control={<Radio color='primary' />}\n            label={this.Label('2 Players')}\n            labelPlacement='end'\n            value={GameMode.VsHuman}\n          />\n          <FormControlLabel\n            className={label}\n            control={<Radio color='primary' />}\n            label={this.Label('VS AI')}\n            labelPlacement='end'\n            value={GameMode.VsAgent}\n          />\n        </RadioGroup>\n      </FormControl>\n    );\n  }\n\n  get FirstHandOptions(): ReactElement {\n    const {firstHand} = this.state;\n    const {label} = this.props.classes;\n    return (\n      <FormControl component='fieldset'>\n        <FormLabel component='legend'>\n          <Typography variant='button'>First Hand</Typography>\n        </FormLabel>\n        <RadioGroup\n          value={firstHand}\n          onChange={(event) => this.handleFirstHandChange(event)}\n          row>\n          <FormControlLabel\n            className={label}\n            control={<Radio color='primary' />}\n            label={this.Label('Me First')}\n            labelPlacement='end'\n            value={Role.Human}\n          />\n          <FormControlLabel\n            className={label}\n            control={<Radio color='primary' />}\n            label={this.Label('AI First')}\n            labelPlacement='end'\n            value={Role.Agent}\n          />\n        </RadioGroup>\n      </FormControl>\n    );\n  }\n\n  get DifficultyOption(): ReactElement {\n    const {aiLevel} = this.state;\n    const {label} = this.props.classes;\n    return (\n      <FormControl>\n        <FormLabel component='legend'>\n          <Typography variant='button'>Level</Typography>\n        </FormLabel>\n        <RadioGroup\n          onChange={(event) => this.handleAiLevelChange(event)}\n          value={aiLevel}>\n          <FormControlLabel\n            className={label}\n            control={<Radio color='primary' />}\n            label={this.Label('Easy')}\n            labelPlacement='end'\n            value={AiLevel.easy}\n          />\n          <FormControlLabel\n            className={label}\n            control={<Radio color='primary' />}\n            label={this.Label('Medium')}\n            labelPlacement='end'\n            value={AiLevel.medium}\n          />\n          <FormControlLabel\n            className={label}\n            control={<Radio color='primary' />}\n            label={this.Label('Difficult')}\n            labelPlacement='end'\n            value={AiLevel.hard}\n          />\n        </RadioGroup>\n      </FormControl>\n    );\n  }\n\n  render(): ReactElement {\n    const {gameMode} = this.state;\n    const {button} = this.props.classes;\n    return (\n      <GameDialog\n        fullWidth\n        maxWidth='xs'\n        onClose={() => this.context.closeDialog()}\n        onEnter={() => this.resetDialog()}\n        open={this.context.dialogOpen}>\n        <DialogTitle style={{color: teal[500]}}>Game Setting</DialogTitle>\n        <DialogContent>\n          <Grid container direction='column'>\n            {this.GameModeOptions}\n            <VerticalGap size='md' />\n            {gameMode === GameMode.VsAgent && this.FirstHandOptions}\n            {gameMode === GameMode.VsAgent && this.DifficultyOption}\n          </Grid>\n        </DialogContent>\n        <VerticalGap size='sm' />\n        <DialogActions>\n          <Grid item xs={12} sm={6}>\n            <Grid container direction='row' spacing={1}>\n              <Grid item xs={6}>\n                <Button\n                  className={button}\n                  color='secondary'\n                  fullWidth\n                  onClick={() => this.context.closeDialog()}\n                  size='small'\n                  variant='outlined'>\n                  Cancel\n                </Button>\n              </Grid>\n              <Grid item xs={6}>\n                <Button\n                  className={button}\n                  color='primary'\n                  fullWidth\n                  onClick={() => this.startNewGame()}\n                  size='small'\n                  variant='contained'>\n                  Submit\n                </Button>\n              </Grid>\n            </Grid>\n          </Grid>\n        </DialogActions>\n      </GameDialog>\n    );\n  }\n}\nDialogComponent.contextType = Context;\n\nexport default withWidth()(withStyles(STYLE)(DialogComponent));\n","import {Theme, createStyles} from '@material-ui/core';\n\nexport default (theme: Theme) =>\n  createStyles({\n    button: {\n      boxShadow: theme.shadows[0],\n      textTransform: 'initial',\n    },\n    label: {\n      width: '50%',\n      margin: 0,\n    },\n  });\n","import {Theme, createStyles} from '@material-ui/core';\nimport {teal} from '@material-ui/core/colors';\n\nexport default (theme: Theme) =>\n  createStyles({\n    title: {\n      color: teal[600],\n      fontWeight: 600,\n    },\n    chess: {\n      borderRadius: '50%',\n      boxShadow: theme.shadows[3],\n      height: 12,\n      width: 12,\n      [theme.breakpoints.down('xs')]: {\n        height: 10,\n        width: 10,\n      }\n    },\n    button: {\n      boxShadow: theme.shadows[0],\n      textTransform: 'initial',\n    },\n    notice: {\n      ...theme.shape,\n      backgroundColor: teal[400],\n      color: theme.palette.common.white,\n      height: '100%',\n      padding: theme.spacing(1, 0, 1),\n    },\n    header: {\n      background: theme.palette.common.white,\n      color: theme.palette.common.black,\n      padding: theme.spacing(2.5, 1.5, 1.5, 2),\n      [theme.breakpoints.down('xs')]: {\n        padding: theme.spacing(2.5, 1.5, 1, 2),\n      },\n    },\n    message: {\n      color: teal[500],\n      fontSize: 15,\n      fontWeight: 400,\n      paddingLeft: theme.spacing(0.7),\n      textTransform: 'initial',\n      [theme.breakpoints.down('xs')]: {\n        fontSize: 12,\n        paddingLeft: theme.spacing(0.5),\n      },\n    },\n  });\n","/********************\n * Header Component *\n ********************/\nimport React, {ReactElement} from 'react';\n\n/** Components. */\nimport {\n  Button,\n  Grid,\n  Typography,\n  withWidth,\n  IconButton,\n} from '@material-ui/core';\nimport {blue, teal, yellow} from '@material-ui/core/colors';\n/** Styles. */\nimport {withStyles} from '@material-ui/core/styles';\nimport {\n  NavigateBefore,\n  NavigateNext,\n  FilterTiltShift,\n} from '@material-ui/icons';\n\n/** Types. */\nimport {GameState, GameStatus, GameMode} from '../../types/game';\nimport {Role} from '../../types/role';\n/** Components. */\nimport Context from '../provider/Context';\nimport {VerticalGap} from '../share/Gap';\nimport Dialog from './dialog/Dialog';\nimport STYLE from './Header.style';\n\ninterface HeaderProps {\n  classes: {\n    button: string;\n    chess: string;\n    header: string;\n    message: string;\n    notice: string;\n    title: string;\n  };\n  width: string;\n}\n\nclass Header extends React.Component<HeaderProps> {\n  get nextTurnColorNotice(): string {\n    const {status, board}: GameState = this.context;\n    if (status === GameStatus.Over) {\n      return yellow[600];\n    }\n    return board.stepCount & 1 ? 'white' : 'black';\n  }\n\n  get nextStepCountNotice(): number {\n    const {board, status, winner}: GameState = this.context;\n    if (status === GameStatus.Over) {\n      if (winner.role === Role.Empty) {\n        return 0;\n      } else {\n        return board.stepCount;\n      }\n    } else {\n      return board.stepCount + 1;\n    }\n  }\n\n  get twoPlayersWinColor(): string {\n    const {board}: GameState = this.context;\n    return board.stepCount & 1 ? 'Black' : 'White';\n  }\n\n  get textMessage(): string {\n    const {\n      aiThinking,\n      board,\n      mode,\n      role,\n      status,\n      winner,\n    }: GameState = this.context;\n    if (aiThinking) {\n      return `AI is thinking...`;\n    }\n    if (winner.role !== Role.Empty) {\n      if (mode === GameMode.VsAgent) {\n        if (winner.role === Role.Human) {\n          return `Congratulations! You win!!`;\n        } else {\n          return `Good luck next time! AI win!!`;\n        }\n      }\n      return `${this.twoPlayersWinColor} role's win!`;\n    } else {\n      if (status === GameStatus.Over) {\n        return `Please start a new game!`;\n      } else {\n        if (mode === GameMode.VsAgent) {\n          if (role === Role.Human) {\n            return `Your turn!`;\n          } else {\n            return `AI turn!`;\n          }\n        } else {\n          if (board.stepCount & 1) {\n            return `White role's turn!`;\n          } else {\n            return `Black role's turn!`;\n          }\n        }\n      }\n    }\n  }\n\n  get Top(): ReactElement {\n    const {classes, width} = this.props;\n    const {title, notice, chess} = classes;\n    const isXs = width === 'xs';\n    return (\n      <Grid item xs={12}>\n        <Grid\n          container\n          direction='row'\n          justify='space-between'\n          alignItems='center'>\n          <Grid item xs={6}>\n            <Typography variant={isXs ? 'h4' : 'h3'} className={title}>\n              GoMoKu\n            </Typography>\n          </Grid>\n          <Grid item xs={4}>\n            <Grid container spacing={1} direction='row'>\n              <Grid item xs={6}>\n                <Grid\n                  container\n                  direction='column'\n                  className={notice}\n                  alignItems='center'>\n                  <Typography variant={isXs ? 'button' : 'h6'}>Turn</Typography>\n                  <VerticalGap size='xs' />\n                  <Grid\n                    className={chess}\n                    style={{backgroundColor: this.nextTurnColorNotice}}\n                  />\n                </Grid>\n              </Grid>\n              <Grid item xs={6}>\n                <Grid\n                  container\n                  direction='column'\n                  className={notice}\n                  alignItems='center'\n                  justify='center'>\n                  <Typography variant={isXs ? 'button' : 'h6'}>Step</Typography>\n                  <Typography\n                    variant='body2'\n                    align='center'\n                    style={{\n                      color: this.nextTurnColorNotice,\n                      fontWeight: 500,\n                    }}>\n                    {this.nextStepCountNotice}\n                  </Typography>\n                </Grid>\n              </Grid>\n            </Grid>\n          </Grid>\n        </Grid>\n      </Grid>\n    );\n  }\n\n  get Instruction(): ReactElement {\n    const {classes, width} = this.props;\n    const isXs = width === 'xs';\n    const {button, message} = classes;\n    return (\n      <Grid\n        alignItems='center'\n        container\n        direction='row'\n        justify='space-between'>\n        <Grid item xs={6}>\n          <Typography variant='button' className={message}>\n            {this.textMessage}\n          </Typography>\n        </Grid>\n        {this.context.status === GameStatus.Open && (\n          <Grid item xs={2}>\n            <Grid container direction='row'>\n              <Grid item xs={6}>\n                <IconButton\n                  size='small'\n                  color='primary'\n                  onClick={() => this.context.stepBackward()}\n                  disabled={!this.context.board.recordedSteps.length}>\n                  <NavigateBefore />\n                </IconButton>\n              </Grid>\n              <Grid item xs={6}>\n                <IconButton\n                  size='small'\n                  color='primary'\n                  onClick={() => this.context.stepForward()}\n                  disabled={!this.context.board.backwardSteps.length}>\n                  <NavigateNext />\n                </IconButton>\n              </Grid>\n            </Grid>\n          </Grid>\n        )}\n        <Grid item xs={4}>\n          <Button\n            className={button}\n            color='primary'\n            fullWidth\n            onClick={() => this.context.openDialog()}\n            startIcon={<FilterTiltShift />}\n            style={{\n              backgroundColor:\n                this.context.status === GameStatus.Over ? blue[500] : teal[500],\n            }}\n            variant='contained'>\n            <Typography variant={isXs ? 'button' : 'h6'}>\n              {isXs ? 'Start' : 'New Game'}\n            </Typography>\n          </Button>\n          <Dialog />\n        </Grid>\n      </Grid>\n    );\n  }\n\n  render(): ReactElement {\n    const {classes} = this.props;\n    return (\n      <Grid className={classes.header}>\n        {this.Top}\n        <VerticalGap size='sm' />\n        {this.Instruction}\n      </Grid>\n    );\n  }\n}\n\nHeader.contextType = Context;\n\nexport default withWidth()(withStyles(STYLE)(Header));\n","/**********************\n * Analyzer Component *\n **********************/\nimport React, {ReactElement} from 'react';\n\n/** Components. */\nimport {Grid, Button, withWidth} from '@material-ui/core';\nimport {withStyles} from '@material-ui/styles';\nimport {Timer, BlurOn} from '@material-ui/icons';\n\nimport Context from '../provider/Context';\nimport STYLE from './Analyzer.style';\n\ninterface AnalyzerProps {\n  classes: {\n    analyzer: string;\n    button: string;\n  };\n  width: string;\n}\nclass AnalyzerComponent extends React.Component<AnalyzerProps> {\n  get score(): string {\n    const prefix: string = this.props.width === 'xs' ? '' : 'Score: ';\n    return `${prefix}${this.context.aiScore}`;\n  }\n\n  get timer(): string {\n    const prefix: string = this.props.width === 'xs' ? '' : 'Timer: ';\n    return `${prefix}${this.context.aiTimer / 1000}s`;\n  }\n\n  render(): ReactElement {\n    const {analyzer} = this.props.classes;\n    return (\n      <Grid\n        className={analyzer}\n        container\n        direction='row'\n        justify='space-between'\n        spacing={1}>\n        <Grid item xs={6}>\n          <Button\n            color='primary'\n            disableRipple\n            fullWidth\n            startIcon={<BlurOn />}\n            variant='outlined'>\n            {this.score}\n          </Button>\n        </Grid>\n        <Grid item xs={6}>\n          <Button\n            color='primary'\n            disableRipple\n            fullWidth\n            startIcon={<Timer />}\n            variant='outlined'>\n            {this.timer}\n          </Button>\n        </Grid>\n      </Grid>\n    );\n  }\n}\n\nAnalyzerComponent.contextType = Context;\nexport default withWidth()(withStyles(STYLE)(AnalyzerComponent));\n","import {Theme, createStyles} from '@material-ui/core';\n\nexport default (theme: Theme) =>\n  createStyles({\n    button: {\n      boxShadow: theme.shadows[0],\n    },\n    analyzer: {\n      padding: theme.spacing(1.5, 1.5, 0),\n      [theme.breakpoints.down('xs')]: {\n        padding: theme.spacing(1, 1, 0),\n      },\n    },\n  });\n","import {createStyles, Theme} from '@material-ui/core';\nimport {MOBILE_SCREEN, pageMaxWidth} from '../../utils/screen';\n\nexport default (theme: Theme) =>\n  createStyles({\n    app: {\n      marginTop: theme.spacing(3),\n      [theme.breakpoints.down(MOBILE_SCREEN)]: {\n        marginTop: 0,\n      },\n    },\n    paper: {\n      ...pageMaxWidth(theme),\n      width: '100%',\n      overflow: 'hidden',\n      marginBottom: theme.spacing(10),\n    },\n  });\n","/*****************\n * App Component *\n *****************/\nimport React, {ReactElement} from 'react';\n\n/** Components. */\nimport {CssBaseline, Divider, Fade, Grid, Paper} from '@material-ui/core';\n\n/** Styles. */\nimport {withStyles} from '@material-ui/styles';\n\n/** Components. */\nimport Board from '../board/Board';\nimport Footer from '../footer/Footer';\nimport Header from '../header/Header';\nimport Analyzer from '../analyzer/Analyzer';\nimport STYLE from './App.style';\nimport Context from '../provider/Context';\nimport {GameStatus, GameMode} from '../../types/game';\n\ninterface AppProps {\n  classes: {\n    app: string;\n    paper: string;\n  };\n}\n\nclass App extends React.Component<AppProps> {\n  render(): ReactElement {\n    const {app, paper} = this.props.classes;\n    return (\n      <Grid container direction='row' justify='center' className={app}>\n        <CssBaseline />\n        <Fade in timeout={800}>\n          <Paper elevation={5} square={false} className={paper}>\n            <Header />\n            <Divider />\n            <Board />\n            <Divider />\n            {this.context.status === GameStatus.Open &&\n              this.context.mode === GameMode.VsAgent && <Analyzer />}\n            <Footer />\n          </Paper>\n        </Fade>\n      </Grid>\n    );\n  }\n}\n\nApp.contextType = Context;\nexport default withStyles(STYLE)(App);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as {env: {[key: string]: string}}).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then((registration) => {\n      registration.unregister();\n    });\n  }\n}\n","export enum Direction {\n  Right,\n  Left,\n  Down,\n  Up,\n  RightDown,\n  LeftUp,\n  LeftDown,\n  RightUp,\n}\n\nexport enum MoveDirection {\n  Row,\n  Col,\n  Des,\n  Asc,\n}\n","export enum Score {\n  Max = 100000000,\n  Five = 10000000,\n  Four = 100000,\n  BlockedFour = 10000,\n  Three = 1000,\n  BlockedThree = 100,\n  Two = 100,\n  BlockedTwo = 10,\n  One = 10,\n  BlockedOne = 10,\n  Zero = 0,\n  Min = -100000000,\n}\n\nexport enum Gap {\n  Default = -1,\n  Zero = 0,\n  One = 1,\n  Two = 2,\n  Three = 3,\n  Four = 4,\n  Five = 5,\n}\n\nexport enum BlockCount {\n  Zero = 0,\n  One = 1,\n  Two = 2,\n}\n\nexport enum SameCount {\n  One = 1,\n  Two = 2,\n  Three = 3,\n  Four = 4,\n  Five = 5,\n  Six = 6,\n  Seven = 7,\n  Eight = 8,\n}\n\nexport interface PointScoreMap {\n  [GapCount: number]: {\n    [BlockCount: number]: {\n      [SameCount: number]: Score;\n    };\n  };\n}\n","import {createMuiTheme} from '@material-ui/core/styles';\nimport {teal, amber, pink, red} from '@material-ui/core/colors';\n\ndeclare module '@material-ui/core/styles/createMuiTheme' {\n  interface Theme {\n    status: {\n      danger: string;\n    };\n  }\n  interface ThemeOptions {\n    status?: {\n      danger?: string;\n    };\n  }\n}\n\nexport default createMuiTheme({\n  palette: {\n    primary: {\n      main: teal[500],\n    },\n    secondary: amber,\n    error: pink,\n  },\n  status: {\n    danger: red[500],\n  },\n});\n","export const BOUND_LIMIT = 5;\nexport const COUNT_LIMIT = 20;\nexport const TIME_LIMIT = 100000; // 100 seconds.\nexport const SPREAD_LIMIT = 1;\nexport const SEARCH_DEPTH = 8;\nexport const AI_DEPTH = 5;\n","/** Constant. */\nimport {BOARD_SIZE} from '../constants/game';\n\n/** Types. */\nimport {Winner} from '../types/board';\nimport {Role} from '../types/role';\nimport {MoveDirection} from '../types/direction';\nimport Board from '../models/board';\n\n/**\n * It will be guarantee that the role passed in will not be EMPTY.\n * Returns array of points with consecutive roles.\n */\nexport const getFiveConsecutivePoints = (\n  board: Role[][],\n  currentRow: number,\n  currentCol: number,\n  currentRole: Role\n): number[][] => {\n  let consecutivePoints: number[][] = [];\n  const resetConsecutivePoints = (): void => {\n    consecutivePoints = [];\n  };\n  const withinBound = (row: number, col: number): boolean =>\n    row >= 0 && col >= 0 && row < BOARD_SIZE && col < BOARD_SIZE;\n\n  const {Row, Col, Des, Asc} = MoveDirection;\n  const moveDirections = [Row, Col, Des, Asc];\n  for (const moveDirection of moveDirections) {\n    resetConsecutivePoints();\n    for (let r = 0; r < 5; r++) {\n      let [row, col] = [currentRow, currentCol + r];\n      switch (moveDirection) {\n        case Row:\n          [row, col] = [currentRow, currentCol + r];\n          break;\n        case Col:\n          [row, col] = [currentRow + r, currentCol];\n          break;\n        case Des:\n          [row, col] = [currentRow + r, currentCol + r];\n          break;\n        case Asc:\n          [row, col] = [currentRow + r, currentCol - r];\n          break;\n        default: // do not do anything.\n      }\n      if (!withinBound(row, col) || board[row][col] !== currentRole) {\n        break;\n      }\n      consecutivePoints.push([row, col]);\n    }\n    if (consecutivePoints.length === 5) {\n      return consecutivePoints;\n    }\n  }\n  return [];\n};\n\n/**\n * Returns empty object if there is no winner.\n * Otherwise, return an object with role and winPoints.\n */\nexport const getWinner = (gameBoard: Board): Winner => {\n  const {board} = gameBoard;\n  for (let i = 0; i < BOARD_SIZE; i++) {\n    for (let j = 0; j < BOARD_SIZE; j++) {\n      const role = board[i][j];\n      if (role !== Role.Empty) {\n        const winPoints = getFiveConsecutivePoints(board, i, j, role);\n        if (winPoints.length) {\n          return {role, winPoints};\n        }\n      }\n    }\n  }\n  return {role: Role.Empty, winPoints: []};\n};\n\n/** Counts the steps on board. */\nexport const getStepCount = (board: Role[][]): number => {\n  let count = 0;\n  for (const row of board) {\n    for (const role of row) {\n      if (role !== Role.Empty) {\n        count++;\n      }\n    }\n  }\n  return count;\n};\n","/*****************\n * Game Constant *\n *****************/\n\nexport const BOARD_SIZE = 19;\n\n/** Threshold limit to define the scoring convergence. */\nexport const THRESHOLD = 1.15;\n","/** Types. */\nimport {Score, BlockCount, SameCount, Gap, PointScoreMap} from '../types/score';\n\nexport const POINT_SCORE_MAP: PointScoreMap = {\n  [Gap.Zero]: {\n    [BlockCount.Zero]: {\n      [SameCount.One]: Score.One,\n      [SameCount.Two]: Score.Two,\n      [SameCount.Three]: Score.Three,\n      [SameCount.Four]: Score.Four,\n    },\n    [BlockCount.One]: {\n      [SameCount.One]: Score.BlockedOne,\n      [SameCount.Two]: Score.BlockedTwo,\n      [SameCount.Three]: Score.BlockedThree,\n      [SameCount.Four]: Score.BlockedFour,\n    },\n  },\n  [Gap.One]: {\n    [BlockCount.Zero]: {\n      [SameCount.Two]: Score.Two / 2,\n      [SameCount.Three]: Score.Three,\n      [SameCount.Four]: Score.BlockedFour,\n      [SameCount.Five]: Score.Four,\n    },\n    [BlockCount.One]: {\n      [SameCount.Two]: Score.BlockedTwo,\n      [SameCount.Three]: Score.BlockedThree,\n      [SameCount.Four]: Score.BlockedFour,\n      [SameCount.Five]: Score.BlockedFour,\n    },\n  },\n  [Gap.Two]: {\n    [BlockCount.Zero]: {\n      [SameCount.Three]: Score.Three,\n      [SameCount.Four]: Score.BlockedFour,\n      [SameCount.Five]: Score.BlockedFour,\n      [SameCount.Six]: Score.Four,\n    },\n    [BlockCount.One]: {\n      [SameCount.Three]: Score.BlockedThree, // not reachable\n      [SameCount.Four]: Score.BlockedFour,\n      [SameCount.Five]: Score.BlockedFour,\n      [SameCount.Six]: Score.Four,\n    },\n    [BlockCount.Two]: {\n      [SameCount.Four]: Score.BlockedFour,\n      [SameCount.Five]: Score.BlockedFour,\n      [SameCount.Six]: Score.BlockedFour,\n    },\n  },\n  [Gap.Three]: {\n    [BlockCount.Zero]: {\n      [SameCount.Four]: Score.Three, // not reachable\n      [SameCount.Five]: Score.Three, // not reachable\n      [SameCount.Six]: Score.BlockedFour,\n      [SameCount.Seven]: Score.Four,\n    },\n    [BlockCount.One]: {\n      [SameCount.Four]: Score.BlockedFour,\n      [SameCount.Five]: Score.BlockedFour,\n      [SameCount.Six]: Score.BlockedFour,\n      [SameCount.Seven]: Score.Four,\n    },\n    [BlockCount.Two]: {\n      [SameCount.Four]: Score.BlockedFour,\n      [SameCount.Five]: Score.BlockedFour,\n      [SameCount.Six]: Score.BlockedFour,\n      [SameCount.Seven]: Score.BlockedFour,\n    },\n  },\n  [Gap.Four]: {\n    [BlockCount.Zero]: {\n      [SameCount.Five]: Score.Four,\n      [SameCount.Six]: Score.Four,\n      [SameCount.Seven]: Score.Four,\n      [SameCount.Eight]: Score.Four,\n    },\n    [BlockCount.One]: {\n      [SameCount.Four]: Score.BlockedFour,\n      [SameCount.Five]: Score.BlockedFour,\n      [SameCount.Six]: Score.BlockedFour,\n      [SameCount.Seven]: Score.BlockedFour,\n      [SameCount.Eight]: Score.Four,\n    },\n    [BlockCount.Two]: {\n      [SameCount.Five]: Score.BlockedFour,\n      [SameCount.Six]: Score.BlockedFour,\n      [SameCount.Seven]: Score.BlockedFour,\n      [SameCount.Eight]: Score.BlockedFour,\n    },\n  },\n};\n","/***********************\n * Evaluate Point Util *\n ***********************/\nimport {BOARD_SIZE} from '../../constants/game';\nimport {POINT_SCORE_MAP} from '../../constants/score';\n\n/** Types. */\nimport {Score, Gap} from '../../types/score';\nimport {ScoreCache} from '../../types/cache';\nimport {MoveDirection} from '../../types/direction';\nimport {Role} from '../../types/role';\n\n/**\n * Reinforce the score for FOUR related cases.\n * Returns the updated score.\n */\nexport const reinforceScore = (score: Score): Score => {\n  if (score >= Score.BlockedFour && score < Score.Four) {\n    if (score < Score.BlockedFour + Score.Three) {\n      // does not make sense to BLOCKED_FOUR.\n      return Score.Three;\n    } else if (\n      score >= Score.BlockedFour + Score.Three &&\n      score < Score.BlockedFour * 2\n    ) {\n      // generates BLOCKED_FOUR and THREE, should be better than DOUBLE THREE.\n      return Score.Four;\n    } else {\n      // DOUBLE BLOCKED_FOUR, should be better than FOUR.\n      return Score.Four * 2;\n    }\n  }\n  return score;\n};\n\n/** Calculate the gap for scoring. */\nexport const getGap = (emptyRoleIndex: number, sameRoleCount: number): Gap => {\n  if (emptyRoleIndex <= Gap.Zero) {\n    return Gap.Zero;\n  }\n  let gap: Gap = Gap.Default;\n  const {One, Two, Three, Four, Five} = Gap;\n  for (const gapCount of [One, Two, Three, Four, Five]) {\n    if (\n      emptyRoleIndex === gapCount ||\n      emptyRoleIndex === sameRoleCount - gapCount\n    ) {\n      gap = gapCount;\n      break;\n    }\n  }\n  return gap;\n};\n\n/** Calculate the score for a given point. */\nexport const scorePoint = (\n  emptyRoleIndex: number,\n  blockRoleCount: number,\n  sameRoleCount: number\n): Score => {\n  const gapCount: Gap = getGap(emptyRoleIndex, sameRoleCount);\n  if (gapCount === Gap.Five || sameRoleCount - gapCount >= Gap.Five) {\n    return Score.Five;\n  }\n  if (gapCount in POINT_SCORE_MAP) {\n    const blockRoleMap = POINT_SCORE_MAP[gapCount];\n    if (blockRoleCount in blockRoleMap) {\n      const sameRoleMap = blockRoleMap[blockRoleCount];\n      if (sameRoleCount in sameRoleMap) {\n        return sameRoleMap[sameRoleCount];\n      }\n    }\n  }\n  return Score.Zero;\n};\n\n/**\n * Calculates the score after put the chess on the current position.\n * For performance purpose, if there is a input direction, we ONLY need to\n * calculate the score for 1 direction. Otherwise, we will calculate all 4\n * directions.\n * Returns the score of the point.\n */\nexport const evaluatePoint = (\n  board: Role[][],\n  scoreCache: ScoreCache,\n  currentRow: number,\n  currentCol: number,\n  currentRole: Role,\n  moveDirection?: MoveDirection\n) => {\n  const {Row, Col, Des, Asc} = MoveDirection;\n  let totalScore = 0;\n  let [emptyRoleIndex, blockRoleCount, sameRoleCount] = [-1, 0, 1];\n\n  const withinBound = (row: number, col: number): boolean =>\n    row >= 0 && col >= 0 && row < BOARD_SIZE && col < BOARD_SIZE;\n\n  const resetCount = (): void => {\n    [emptyRoleIndex, blockRoleCount, sameRoleCount] = [-1, 0, 1];\n  };\n\n  const hasSameRole = (nextRow: number, nextCol: number): boolean => {\n    if (!withinBound(nextRow, nextCol)) {\n      return false;\n    }\n    return board[nextRow][nextCol] === currentRole;\n  };\n\n  if (moveDirection === undefined || moveDirection === Row) {\n    resetCount();\n    for (\n      let i = currentRow, j = currentCol + 1;\n      i === currentRow && j < Infinity;\n      i += 0, j++\n    ) {\n      if (!withinBound(i, j)) {\n        blockRoleCount++;\n        break;\n      }\n      const targetRole = board[i][j];\n      if (targetRole === Role.Empty) {\n        if (emptyRoleIndex === -1 && hasSameRole(i, j + 1)) {\n          emptyRoleIndex = sameRoleCount;\n          continue;\n        } else {\n          break;\n        }\n      } else if (targetRole === currentRole) {\n        sameRoleCount++;\n        continue;\n      } else {\n        blockRoleCount++;\n        break;\n      }\n    }\n\n    for (\n      let i = currentRow, j = currentCol - 1;\n      i === currentRow && j > -Infinity;\n      i += 0, j--\n    ) {\n      if (!withinBound(i, j)) {\n        blockRoleCount++;\n        break;\n      }\n      const targetRole = board[currentRow][j];\n      if (targetRole === Role.Empty) {\n        if (emptyRoleIndex === -1 && hasSameRole(i, j - 1)) {\n          emptyRoleIndex = 0;\n          continue;\n        } else {\n          break;\n        }\n      } else if (targetRole === currentRole) {\n        sameRoleCount++;\n        emptyRoleIndex !== -1 && emptyRoleIndex++;\n        continue;\n      } else {\n        blockRoleCount++;\n        break;\n      }\n    }\n    scoreCache[currentRole][Row][currentRow][currentCol] = scorePoint(\n      emptyRoleIndex,\n      blockRoleCount,\n      sameRoleCount\n    );\n  }\n  totalScore += scoreCache[currentRole][Row][currentRow][currentCol];\n\n  // Case: |\n  if (moveDirection === undefined || moveDirection === Col) {\n    resetCount();\n    for (\n      let i = currentRow + 1, j = currentCol;\n      i < Infinity && j === currentCol;\n      i++, j += 0\n    ) {\n      if (!withinBound(i, j)) {\n        blockRoleCount++;\n        break;\n      }\n      const targetRole = board[i][currentCol];\n      if (targetRole === Role.Empty) {\n        if (emptyRoleIndex === -1 && hasSameRole(i + 1, j)) {\n          emptyRoleIndex = sameRoleCount;\n          continue;\n        } else {\n          break;\n        }\n      } else if (targetRole === currentRole) {\n        sameRoleCount++;\n        continue;\n      } else {\n        blockRoleCount++;\n        break;\n      }\n    }\n\n    for (\n      let i = currentRow - 1, j = currentCol;\n      i > -Infinity && j === currentCol;\n      i--, j += 0\n    ) {\n      if (!withinBound(i, j)) {\n        blockRoleCount++;\n        break;\n      }\n      const targetRole = board[i][currentCol];\n      if (targetRole === Role.Empty) {\n        if (emptyRoleIndex === -1 && i > 0 && hasSameRole(i - 1, j)) {\n          emptyRoleIndex = 0;\n          continue;\n        } else {\n          break;\n        }\n      } else if (targetRole === currentRole) {\n        sameRoleCount++;\n        emptyRoleIndex !== -1 && emptyRoleIndex++;\n        continue;\n      } else {\n        blockRoleCount++;\n        break;\n      }\n    }\n    scoreCache[currentRole][Col][currentRow][currentCol] = scorePoint(\n      emptyRoleIndex,\n      blockRoleCount,\n      sameRoleCount\n    );\n  }\n  totalScore += scoreCache[currentRole][Col][currentRow][currentCol];\n\n  // Case: \\\n  if (moveDirection === undefined || moveDirection === Des) {\n    resetCount();\n    for (\n      let i = currentRow + 1, j = currentCol + 1;\n      i < Infinity && j < Infinity;\n      i++, j++\n    ) {\n      if (!withinBound(i, j)) {\n        blockRoleCount++;\n        break;\n      }\n      const targetRole = board[i][j];\n      if (targetRole === Role.Empty) {\n        if (emptyRoleIndex === -1 && hasSameRole(i + 1, j + 1)) {\n          emptyRoleIndex = sameRoleCount;\n          continue;\n        } else {\n          break;\n        }\n      } else if (targetRole === currentRole) {\n        sameRoleCount++;\n        continue;\n      } else {\n        blockRoleCount++;\n        break;\n      }\n    }\n\n    for (\n      let i = currentRow - 1, j = currentCol - 1;\n      i > -Infinity && j > -Infinity;\n      i--, j--\n    ) {\n      if (!withinBound(i, j)) {\n        blockRoleCount++;\n        break;\n      }\n      const targetRole = board[i][j];\n      if (targetRole === Role.Empty) {\n        if (emptyRoleIndex === -1 && hasSameRole(i - 1, j - 1)) {\n          emptyRoleIndex = 0;\n          continue;\n        } else {\n          break;\n        }\n      } else if (targetRole === currentRole) {\n        sameRoleCount++;\n        emptyRoleIndex !== -1 && emptyRoleIndex++;\n        continue;\n      } else {\n        blockRoleCount++;\n        break;\n      }\n    }\n    scoreCache[currentRole][Des][currentRow][currentCol] = scorePoint(\n      emptyRoleIndex,\n      blockRoleCount,\n      sameRoleCount\n    );\n  }\n  totalScore += scoreCache[currentRole][Des][currentRow][currentCol];\n\n  // Case: /\n  if (moveDirection === undefined || moveDirection === Asc) {\n    resetCount();\n    for (\n      let i = currentRow + 1, j = currentCol - 1;\n      i < Infinity && j > -Infinity;\n      i++, j--\n    ) {\n      if (!withinBound(i, j)) {\n        blockRoleCount++;\n        break;\n      }\n      const targetRole = board[i][j];\n      if (targetRole === Role.Empty) {\n        if (emptyRoleIndex === -1 && hasSameRole(i + 1, j - 1)) {\n          emptyRoleIndex = sameRoleCount;\n          continue;\n        } else {\n          break;\n        }\n      } else if (targetRole === currentRole) {\n        sameRoleCount++;\n        continue;\n      } else {\n        blockRoleCount++;\n        break;\n      }\n    }\n\n    for (\n      let i = currentRow - 1, j = currentCol + 1;\n      i > -Infinity && j < Infinity;\n      i--, j++\n    ) {\n      if (!withinBound(i, j)) {\n        blockRoleCount++;\n        break;\n      }\n      const targetRole = board[i][j];\n      if (targetRole === Role.Empty) {\n        if (emptyRoleIndex === -1 && hasSameRole(i - 1, j + 1)) {\n          emptyRoleIndex = 0;\n          continue;\n        } else {\n          break;\n        }\n      } else if (targetRole === currentRole) {\n        sameRoleCount++;\n        emptyRoleIndex !== -1 && emptyRoleIndex++;\n        continue;\n      } else {\n        blockRoleCount++;\n        break;\n      }\n    }\n    scoreCache[currentRole][Asc][currentRow][currentCol] = scorePoint(\n      emptyRoleIndex,\n      blockRoleCount,\n      sameRoleCount\n    );\n  }\n  totalScore += scoreCache[currentRole][Asc][currentRow][currentCol];\n  return totalScore;\n};\n","/******************\n * Generator Util *\n ******************/\n/** Constant. */\nimport {BOARD_SIZE} from '../constants/game';\n\n/** Model. */\nimport Board from '../models/board';\n\n/** Types. */\nimport {DisplayStep, Step} from '../types/board';\nimport {ScoreCache} from '../types/cache';\nimport {MoveDirection} from '../types/direction';\nimport {GameMode, GameState, GameStatus, AiLevel} from '../types/game';\nimport {Role} from '../types/role';\n\n/** returns an empty board. */\nexport const buildBoard = (): Role[][] => {\n  const board: Role[][] = [];\n  for (let i = 0; i < BOARD_SIZE; i++) {\n    const row = [];\n    for (let j = 0; j < BOARD_SIZE; j++) {\n      row.push(Role.Empty);\n    }\n    board.push(row);\n  }\n  return board;\n};\n\n/** returns an empty display board. */\nexport const buildDisplayBoard = (): DisplayStep[][] => {\n  const board: DisplayStep[][] = [];\n  for (let i = 0; i < BOARD_SIZE; i++) {\n    const row: DisplayStep[] = [];\n    for (let j = 0; j < BOARD_SIZE; j++) {\n      row.push({\n        color: 'inherit',\n        backgroundColor: 'inherit',\n        shadow: 0,\n        label: 0,\n      });\n    }\n    board.push(row);\n  }\n  return board;\n};\n\n/** Constructs the default step. */\nexport const buildStep = (row: number, col: number): Step => ({\n  point: [row, col],\n  humanScore: 0,\n  agentScore: 0,\n  score: 0,\n  role: Role.Empty,\n});\n\n/** returns an empty score cache. */\nexport const buildScoreCache = (): ScoreCache => ({\n  [Role.Agent]: {\n    [MoveDirection.Row]: buildBoard(),\n    [MoveDirection.Col]: buildBoard(),\n    [MoveDirection.Des]: buildBoard(),\n    [MoveDirection.Asc]: buildBoard(),\n  },\n  [Role.Human]: {\n    [MoveDirection.Row]: buildBoard(),\n    [MoveDirection.Col]: buildBoard(),\n    [MoveDirection.Des]: buildBoard(),\n    [MoveDirection.Asc]: buildBoard(),\n  },\n});\n\n/** Returns the default game state. */\nexport const buildGameState = (): GameState => ({\n  aiLevel: AiLevel.easy,\n  aiThinking: false,\n  aiScore: 0,\n  aiTimer: 0,\n  board: new Board(),\n  firstHand: Role.Human,\n  mode: GameMode.VsAgent,\n  role: Role.Human,\n  status: GameStatus.Over,\n  winner: {\n    role: Role.Empty,\n    winPoints: [],\n  },\n});\n\n/**  returns date time in number. */\nexport const buildTimer = (): number => Number(new Date());\n","/*************\n * Next Util *\n *************/\nimport {Role} from '../types/role';\n\n/**\n * Switch the role.\n * @param {Role} currentRole current role.\n * @returns {Role} returns the next role.\n */\nexport const nextRole = (currentRole: Role): Role =>\n  currentRole === Role.Agent ? Role.Human : Role.Agent;\n","/** Constant. */\nimport {BOUND_LIMIT} from '../constants/ai';\n\n/** Types. */\nimport {Step} from '../types/board';\n\n/**\n * Checks if the AI need to consider the point.\n * Returns true if AI should consider the point.\n */\nexport const shouldConsiderStep = (\n  heuristicStep: Step,\n  steps: Step[]\n): boolean => {\n  if (!steps || !steps.length) {\n    return false;\n  }\n  const [curRow, curCol] = heuristicStep.point;\n  for (const step of steps) {\n    const [endRow, endCol] = step.point;\n    const [deltaX, deltaY] = [\n      Math.abs(curRow - endRow),\n      Math.abs(curCol - endCol),\n    ];\n    if (deltaX >= BOUND_LIMIT || deltaY >= BOUND_LIMIT) {\n      return false;\n    }\n    // on star direction.\n    if (!(curRow === endRow || curCol === endCol || deltaX === deltaY)) {\n      return false;\n    }\n  }\n  return true;\n};\n","import {MersenneTwister19937, integer} from 'random-js';\n\n/** Constants. */\nimport {BOARD_SIZE} from '../constants/game';\n\n/** Util. */\nimport {buildBoard} from '../utils/generator';\nimport {Role} from '../types/role';\n\nconst engine = MersenneTwister19937.autoSeed();\n\nexport default class Zobrist {\n  hashCode: number = this._random();\n  agentStepTags: Role[][] = buildBoard();\n  humanStepTags: Role[][] = buildBoard();\n\n  constructor() {\n    this.reset();\n  }\n\n  _random(): number {\n    return integer(1, 1000000000)(engine);\n  }\n\n  reset(): void {\n    for (let i = 0; i < BOARD_SIZE; i++) {\n      for (let j = 0; j < BOARD_SIZE; j++) {\n        this.agentStepTags[i][j] = this._random();\n        this.humanStepTags[i][j] = this._random();\n      }\n    }\n  }\n\n  updateHashCode(\n    currentRow: number,\n    currentCol: number,\n    currentRole: number\n  ): void {\n    this.hashCode ^=\n      currentRole === Role.Agent\n        ? this.agentStepTags[currentRow][currentCol]\n        : this.humanStepTags[currentRow][currentCol];\n  }\n}\n","import {yellow, teal} from '@material-ui/core/colors';\n\n/** Constants. */\nimport {COUNT_LIMIT} from '../constants/ai';\nimport {BOARD_SIZE} from '../constants/game';\n\n/** Types. */\nimport {DisplayStep, Step} from '../types/board';\nimport {ScoreCache} from '../types/cache';\nimport {MoveDirection} from '../types/direction';\nimport {Role} from '../types/role';\nimport {Score} from '../types/score';\n\n/** Utils. */\nimport {getStepCount} from '../utils/control';\nimport {evaluatePoint, reinforceScore} from '../utils/evaluate/point';\nimport {\n  buildBoard,\n  buildDisplayBoard,\n  buildScoreCache,\n} from '../utils/generator';\nimport {nextRole} from '../utils/next';\nimport {shouldConsiderStep} from '../utils/validator';\n\n/** Model. */\nimport Zobrist from './zobrist';\nimport {GameMode} from '../types/game';\n\nexport default class Board {\n  zobrist: Zobrist = new Zobrist();\n  board: Role[][] = [];\n  displayBoard: DisplayStep[][] = [];\n  scoreCache: ScoreCache = [];\n  optionalSteps: Step[] = [];\n  recordedSteps: Step[] = [];\n  backwardSteps: Step[] = [];\n  agentScores: number[][] = [];\n  humanScores: number[][] = [];\n  stepCount: number = 0;\n  placeCount: number = 0;\n  cleanCount: number = 0;\n\n  constructor() {\n    this.reset();\n  }\n\n  reset() {\n    this.zobrist.reset();\n    this.board = buildBoard();\n    this.displayBoard = buildDisplayBoard();\n    this.scoreCache = buildScoreCache();\n    this.optionalSteps = [];\n    this.recordedSteps = [];\n    this.backwardSteps = [];\n    this.agentScores = buildBoard();\n    this.humanScores = buildBoard();\n    this.stepCount = 0;\n    this.placeCount = 0;\n    this.cleanCount = 0;\n  }\n\n  /** Initialize the board with an open board. */\n  initWithBoard(openBoard: Role[][]): void {\n    this.board = openBoard;\n    this.stepCount = getStepCount(openBoard);\n    this._initScore();\n  }\n\n  /**  Score for AGENT and HUMAN. */\n  _initScore() {\n    const {board, scoreCache} = this;\n    for (let i = 0; i < BOARD_SIZE; i++) {\n      for (let j = 0; j < BOARD_SIZE; j++) {\n        const currentRole = this.board[i][j];\n        if (currentRole === Role.Empty) {\n          if (this._hasNeighbor(i, j, 2, 2)) {\n            // Only score if the EMPTY point has neighbor.\n            this.agentScores[i][j] = evaluatePoint(\n              board,\n              scoreCache,\n              i,\n              j,\n              Role.Agent,\n              undefined\n            );\n            this.humanScores[i][j] = evaluatePoint(\n              board,\n              scoreCache,\n              i,\n              j,\n              Role.Human\n            );\n          }\n        } else if (currentRole === Role.Agent) {\n          // Score the agent; the human should be 0.\n          this.agentScores[i][j] = evaluatePoint(\n            board,\n            scoreCache,\n            i,\n            j,\n            Role.Agent\n          );\n          this.humanScores[i][j] = 0;\n        } else if (currentRole === Role.Human) {\n          // Score the human; the agent should be 0.\n          this.humanScores[i][j] = evaluatePoint(\n            board,\n            scoreCache,\n            i,\n            j,\n            Role.Human\n          );\n          this.agentScores[i][j] = 0;\n        }\n      }\n    }\n  }\n\n  /** Updates the score for each point. */\n  _updateRoleBoardScore = (\n    row: number,\n    col: number,\n    moveDirection: MoveDirection\n  ): void => {\n    const role: Role = this.board[row][col];\n    const {board, scoreCache} = this;\n    if (role !== Role.Human) {\n      this.agentScores[row][col] = evaluatePoint(\n        board,\n        scoreCache,\n        row,\n        col,\n        Role.Agent,\n        moveDirection\n      );\n    } else {\n      this.agentScores[row][col] = 0;\n    }\n    if (role !== Role.Agent) {\n      this.humanScores[row][col] = evaluatePoint(\n        board,\n        scoreCache,\n        row,\n        col,\n        Role.Human,\n        moveDirection\n      );\n    } else {\n      this.humanScores[row][col] = 0;\n    }\n  };\n\n  /** Updates a score on nearby points. */\n  _updateScoreOnMoveDirection(currentRow: number, currentCol: number): void {\n    const radius = 4;\n    const {Row, Col, Des, Asc} = MoveDirection;\n    // case: -\n    for (let i = -radius; i <= radius; i++) {\n      const [row, col] = [currentRow, currentCol + i];\n      if (col < 0) continue;\n      if (col >= BOARD_SIZE) break;\n      this._updateRoleBoardScore(row, col, Row);\n    }\n\n    // case: |\n    for (let i = -radius; i <= radius; i++) {\n      const [row, col] = [currentRow + i, currentCol];\n      if (row < 0) continue;\n      if (row >= BOARD_SIZE) break;\n      this._updateRoleBoardScore(row, col, Col);\n    }\n\n    // case: \\\n    for (let i = -radius; i <= radius; i++) {\n      const [row, col] = [currentRow + i, currentCol + i];\n      if (row < 0 || col < 0) continue;\n      if (row >= BOARD_SIZE || col >= BOARD_SIZE) break;\n      this._updateRoleBoardScore(row, col, Des);\n    }\n\n    // case: /\n    for (let i = -radius; i <= radius; i++) {\n      const [row, col] = [currentRow + i, currentCol - i];\n      if (row < 0 || col < 0) continue;\n      if (row >= BOARD_SIZE || col >= BOARD_SIZE) continue;\n      this._updateRoleBoardScore(row, col, Asc);\n    }\n  }\n\n  updateWinPoints(points: number[][]) {\n    for (const [row, col] of points) {\n      const displayStep: DisplayStep = this.displayBoard[row][col];\n      displayStep.backgroundColor = yellow[600];\n      displayStep.color = teal[600];\n    }\n  }\n\n  /** Updates on a single cell. */\n  _updateDisplayBoard(row: number, col: number, placeChess: boolean): void {\n    if (placeChess) {\n      // Mark it black if the stepCount is in odd.\n      const isBlack = this.stepCount & 1;\n      this.displayBoard[row][col] = {\n        color: isBlack ? 'white' : 'black',\n        backgroundColor: isBlack ? 'black' : 'white',\n        shadow: 2,\n        label: this.stepCount,\n      };\n    } else {\n      this.displayBoard[row][col] = {\n        color: 'inherit',\n        backgroundColor: 'inherit',\n        shadow: 0,\n        label: 0,\n      };\n    }\n  }\n\n  /** Drop the chess. */\n  placeChess(heuristicStep: Step, role: Role): void {\n    this.placeCount++;\n\n    const [row, col] = heuristicStep.point;\n    heuristicStep.role = role;\n    this.board[row][col] = role;\n    this.stepCount++;\n    this._updateDisplayBoard(row, col, true);\n\n    this.zobrist.updateHashCode(row, col, role);\n    this._updateScoreOnMoveDirection(row, col);\n    this.recordedSteps.push(heuristicStep);\n    this.optionalSteps.push(heuristicStep);\n  }\n\n  /** Remove the chess. */\n  cleanChess(heuristicStep: Step) {\n    this.cleanCount++;\n\n    const [row, col] = heuristicStep.point;\n    const role = this.board[row][col];\n    this.board[row][col] = Role.Empty;\n    this.stepCount--;\n    this._updateDisplayBoard(row, col, false);\n\n    this.zobrist.updateHashCode(row, col, role);\n    this._updateScoreOnMoveDirection(row, col);\n    this.recordedSteps.pop();\n    this.optionalSteps.pop();\n  }\n\n  stepBackward(mode: GameMode) {\n    const countStep = mode === GameMode.VsAgent ? 2 : 1;\n    if (this.recordedSteps.length < countStep) {\n      return;\n    }\n    for (let i = 0; i < countStep; i++) {\n      const step = this.recordedSteps[this.recordedSteps.length - 1];\n      this.cleanChess(step);\n      this.backwardSteps.push(step);\n    }\n  }\n\n  stepForward(mode: GameMode) {\n    const countStep = mode === GameMode.VsAgent ? 2 : 1;\n    if (this.backwardSteps.length < countStep) {\n      return;\n    }\n    for (let i = 0; i < countStep; i++) {\n      const step: Step = this.backwardSteps.pop()!;\n      this.placeChess(step, step.role);\n    }\n  }\n\n  _hasNeighbor(\n    currentRow: number,\n    currentCol: number,\n    radius: number,\n    emptyCount: number\n  ): boolean {\n    const {board} = this;\n    const [rowA, rowB] = [currentRow - radius, currentRow + radius];\n    const [colA, colB] = [currentCol - radius, currentCol + radius];\n\n    for (let i = rowA; i <= rowB; i++) {\n      if (i < 0 || i >= BOARD_SIZE) {\n        continue;\n      }\n      for (let j = colA; j <= colB; j++) {\n        if (j < 0 || j >= BOARD_SIZE) {\n          continue;\n        }\n        if (i === currentRow && j === currentCol) {\n          continue;\n        }\n        if (board[i][j] !== Role.Empty) {\n          emptyCount--;\n          if (emptyCount <= 0) {\n            return true;\n          }\n        }\n      }\n    }\n    return false;\n  }\n\n  _updateStepsOnSkipLayers(steps: Step[], role: Role, i: number): void {\n    while (i >= 0) {\n      const step = this.optionalSteps[i];\n      if (\n        (role === Role.Agent && step.agentScore >= Score.Three) ||\n        (role === Role.Human && step.humanScore >= Score.Three)\n      ) {\n        steps.push(step);\n        break;\n      }\n      i -= 2;\n    }\n    if (!steps.length) {\n      steps.push(\n        this.optionalSteps[0].role === role\n          ? this.optionalSteps[0]\n          : this.optionalSteps[1]\n      );\n    }\n  }\n\n  /** Evaluates the score to the entire board. (Before make a step) */\n  evaluateBoard(currentRole: Role) {\n    let [agentMaxScore, humanMaxScore] = [0, 0];\n    const {board} = this;\n    // Traverse and find the highest score.\n    for (let i = 0; i < BOARD_SIZE; i++) {\n      for (let j = 0; j < BOARD_SIZE; j++) {\n        if (board[i][j] === Role.Agent) {\n          agentMaxScore += reinforceScore(this.agentScores[i][j]);\n        }\n        if (board[i][j] === Role.Human) {\n          humanMaxScore += reinforceScore(this.humanScores[i][j]);\n        }\n      }\n    }\n    const sign: number = currentRole === Role.Agent ? 1 : -1;\n    const delta: number = agentMaxScore - humanMaxScore;\n    return sign * delta;\n  }\n\n  /** Heuristic evaluation function. */\n  heuristicEvaluate(\n    currentRole: Role,\n    isOnlyThrees: boolean,\n    applyStarSpread: boolean\n  ): Step[] {\n    // returns a single step.\n    if (this.stepCount <= 0) {\n      const step: Step = {\n        point: [Math.floor(BOARD_SIZE / 2), Math.floor(BOARD_SIZE / 2)],\n        humanScore: 0,\n        agentScore: 0,\n        score: 0,\n        role: currentRole,\n      };\n      return [step];\n    }\n    const fives: Step[] = [];\n    const neighbors: Step[] = [];\n    const attackSteps: Step[] = [];\n    const defendSteps: Step[] = [];\n    const agentFours: Step[] = [];\n    const agentBlockedFours: Step[] = [];\n    const agentDoubleThrees: Step[] = [];\n    const agentThrees: Step[] = [];\n    const agentTwos: Step[] = [];\n    const humanFours: Step[] = [];\n    const humanBlockedFours: Step[] = [];\n    const humanDoubleThrees: Step[] = [];\n    const humanThrees: Step[] = [];\n    const humanTwos: Step[] = [];\n\n    const {board} = this;\n    if (applyStarSpread) {\n      this._updateStepsOnSkipLayers(\n        defendSteps,\n        nextRole(currentRole),\n        this.optionalSteps.length - 1\n      );\n      this._updateStepsOnSkipLayers(\n        attackSteps,\n        currentRole,\n        this.optionalSteps.length - 2\n      );\n    }\n\n    for (let i = 0; i < BOARD_SIZE; i++) {\n      for (let j = 0; j < BOARD_SIZE; j++) {\n        if (board[i][j] === Role.Empty) {\n          if (this.recordedSteps.length < 6) {\n            if (!this._hasNeighbor(i, j, 1, 1)) {\n              continue;\n            }\n          } else if (!this._hasNeighbor(i, j, 2, 2)) {\n            continue;\n          }\n\n          const agentScore = this.agentScores[i][j];\n          const humanScore = this.humanScores[i][j];\n          const maxScore = Math.max(agentScore, humanScore);\n          if (isOnlyThrees && maxScore < Score.Three) {\n            continue;\n          }\n\n          const step: Step = {\n            point: [i, j],\n            humanScore: humanScore,\n            agentScore: agentScore,\n            score: maxScore,\n            role: currentRole,\n          };\n\n          if (applyStarSpread) {\n            const lastStep = this.optionalSteps[this.optionalSteps.length - 1];\n            if (maxScore >= Score.Four) {\n              // handle here\n            } else if (\n              maxScore >= Score.BlockedFour &&\n              shouldConsiderStep(lastStep, defendSteps)\n            ) {\n              //star 路径不是很准，所以考虑冲四防守对手最后一步的棋\n            } else if (\n              shouldConsiderStep(step, attackSteps) ||\n              shouldConsiderStep(step, defendSteps)\n            ) {\n              // handle case\n            } else {\n              continue;\n            }\n          }\n\n          if (agentScore >= Score.Five) {\n            fives.push(step);\n          } else if (humanScore >= Score.Five) {\n            fives.push(step);\n          } else if (agentScore >= Score.Four) {\n            agentFours.push(step);\n          } else if (humanScore >= Score.Four) {\n            humanFours.push(step);\n          } else if (agentScore >= Score.BlockedFour) {\n            agentBlockedFours.push(step);\n          } else if (humanScore >= Score.BlockedFour) {\n            humanBlockedFours.push(step);\n          } else if (agentScore >= 2 * Score.Three) {\n            agentDoubleThrees.push(step);\n          } else if (humanScore >= 2 * Score.Three) {\n            humanDoubleThrees.push(step);\n          } else if (agentScore >= Score.Three) {\n            agentThrees.push(step);\n          } else if (humanScore >= Score.Three) {\n            humanThrees.push(step);\n          } else if (agentScore >= Score.Two) {\n            agentTwos.unshift(step);\n          } else if (humanScore >= Score.Two) {\n            humanTwos.unshift(step);\n          } else {\n            neighbors.push(step);\n          }\n        }\n      }\n    }\n\n    /*************\n     * CASE FIVE *\n     *************/\n    // Killing step\n    if (fives.length) {\n      return fives;\n    }\n\n    /*************\n     * CASE FOUR *\n     *************/\n    if (currentRole === Role.Agent && agentFours.length) {\n      return agentFours;\n    }\n    if (currentRole === Role.Human && humanFours.length) {\n      return humanFours;\n    }\n\n    // Opponent has FOUR. Self does not even have BLOCKED_FOUR.\n    if (\n      currentRole === Role.Agent &&\n      humanFours.length &&\n      !agentBlockedFours.length\n    ) {\n      return humanFours;\n    }\n    if (\n      currentRole === Role.Human &&\n      agentFours.length &&\n      !humanBlockedFours.length\n    ) {\n      return agentFours;\n    }\n\n    /*********************\n     * CASE BLOCKED_FOUR *\n     *********************/\n    // Checks if opponent has FOUR and self has BLOCKED_FOUR.\n    const fours: Step[] =\n      currentRole === Role.Agent\n        ? agentFours.concat(humanFours)\n        : humanFours.concat(agentFours);\n    const blockedFours =\n      currentRole === Role.Agent\n        ? agentBlockedFours.concat(humanBlockedFours)\n        : humanBlockedFours.concat(agentBlockedFours);\n    if (fours.length) {\n      return fours.concat(blockedFours);\n    }\n\n    /*********************\n     * CASE DOUBLE_THREE *\n     *********************/\n    let result: Step[] = [];\n    if (currentRole === Role.Agent) {\n      result = agentDoubleThrees\n        .concat(humanDoubleThrees)\n        .concat(agentBlockedFours)\n        .concat(humanBlockedFours)\n        .concat(agentThrees)\n        .concat(humanThrees);\n    }\n    if (currentRole === Role.Human) {\n      result = humanDoubleThrees\n        .concat(agentDoubleThrees)\n        .concat(humanBlockedFours)\n        .concat(agentBlockedFours)\n        .concat(humanThrees)\n        .concat(agentThrees);\n    }\n\n    if (agentDoubleThrees.length || humanDoubleThrees.length) {\n      return result;\n    }\n\n    /**************\n     * CASE THREE *\n     **************/\n    if (isOnlyThrees) {\n      return result;\n    }\n\n    /************\n     * CASE TWO *\n     ************/\n    const twos: Step[] =\n      currentRole === Role.Agent\n        ? agentTwos.concat(humanTwos)\n        : humanTwos.concat(agentTwos);\n    twos.sort((a, b) => b.score - a.score);\n    result = result.concat(twos.length ? twos : neighbors);\n    if (result.length > COUNT_LIMIT) {\n      return result.slice(0, COUNT_LIMIT);\n    }\n    return result;\n  }\n}\n","/** Utils. */\nimport {buildTimer} from '../utils/generator';\n\n/** Constant. */\nimport {TIME_LIMIT} from '../constants/ai';\n\nexport default class Timer {\n  searchStartTime: number = buildTimer();\n  timeout: number = TIME_LIMIT;\n\n  reset(): void {\n    this.searchStartTime = buildTimer();\n  }\n\n  get consumed(): number {\n    return buildTimer() - this.searchStartTime;\n  }\n\n  get expired(): boolean {\n    return this.consumed > this.timeout;\n  }\n}\n","/** Types. */\nimport {SearchRecord, SearchPoint} from '../types/search';\n\ninterface Cache {\n  [hashCode: number]: SearchPoint;\n}\nexport default class SearchCache {\n  cache: Cache = {};\n\n  reset(): void {\n    this.cache = {};\n  }\n\n  set(hashCode: number, searchRecord: SearchRecord, searchDepth: number): void {\n    const {boardScore, steps, stepCount, alphaBetaPrune} = searchRecord;\n    if (alphaBetaPrune) {\n      return;\n    }\n    const searchPoint: SearchPoint = {\n      depth: searchDepth,\n      record: {boardScore, steps, stepCount},\n    };\n    this.cache[hashCode] = searchPoint;\n  }\n\n  get(hashCode: number): SearchPoint | undefined {\n    return this.cache[hashCode];\n  }\n}\n","import {THRESHOLD} from '../constants/game';\n\n/** Types. */\nimport {Step} from '../types/board';\nimport {Score} from '../types/score';\n\n/**\n * Compares two numbers\n * @param {number} a, the first number to compare.\n * @param {number} b, the second number to compare.\n * @returns {boolean} returns true if they are within the threshold limit.\n */\nexport const equalTo = (a: number, b: number = 0.01): boolean =>\n  b >= 0\n    ? a >= b / THRESHOLD && a <= b * THRESHOLD\n    : a >= b * THRESHOLD && a <= b / THRESHOLD;\n\n/**\n * Compares two numbers\n * @param {number} a, the first number to compare.\n * @param {number} b, the second number to compare.\n * @returns {boolean} returns true if the first number is greater than the\n * second number times threshold limit.\n */\nconst greaterThan = (a: number, b: number): boolean =>\n  b >= 0 ? a >= (b + 0.1) * THRESHOLD : a >= (b + 0.1) / THRESHOLD;\n\n/**\n * Compares two numbers\n * @param {number} a, the first number to compare.\n * @param {number} b, the second number to compare.\n * @returns {boolean} returns true if the first number is less than the\n * second number divides by the threshold limit.\n */\nconst lessThan = (a: number, b: number): boolean =>\n  b >= 0 ? a <= (b - 0.1) / THRESHOLD : a <= (b - 0.1) * THRESHOLD;\n\n/**\n * Compares two numbers\n * @param {number} a, the first number to compare.\n * @param {number} b, the second number to compare.\n * @returns {boolean} returns true if the first number is greater than or equal\n * to the second number times threshold limit.\n */\nexport const greaterThanOrEqualTo = (a: number, b: number): boolean =>\n  equalTo(a, b) || greaterThan(a, b);\n\n/**\n * Compares two numbers\n * @param {number} a, the first number to compare.\n * @param {number} b, the second number to compare.\n * @returns {boolean} returns true if the first number is less than or equal to\n * the second number divides by the threshold limit.\n */\nexport const lessThanOrEqualTo = (a: number, b: number): boolean =>\n  equalTo(a, b) || lessThan(a, b);\n\n/**\n * Checks if points contains a target point.\n * @param {Step[]} steps.\n * @param {Step} targetStep.\n * @returns {boolean} returns true if points contains the targetStep.\n */\nexport const containsStep = (steps: Step[], targetStep: Step): boolean => {\n  const [targetRow, targetCol] = targetStep.point;\n  for (const step of steps) {\n    const [pointRow, pointCol] = step.point;\n    if (pointRow === targetRow && pointCol === targetCol) {\n      return true;\n    }\n  }\n  return false;\n};\n\n/**\n * Checks if two points has the same coordinates.\n * @param {Array<number, number>} pointA, the first point to check.\n * @param {Array<number, number>} pointB, the second point to check.\n * @returns {boolean} returns true if two points has the same coordinates.\n */\nexport const pointEqual = (\n  [aRow, aCol]: number[],\n  [bRow, bCol]: number[]\n): boolean => aRow === bRow && aCol === bCol;\n\n/** Private helper method. */\nconst scoreBetween = (\n  score: number,\n  lowerBound: number,\n  upperBound: number\n): boolean => {\n  return score > lowerBound && score <= upperBound;\n};\n\n/**\n * Rounds the score.\n * @param {number} score, the score to convert.\n * @returns {number} returns the converted score.\n */\nexport const round = (score: number): number => {\n  const sign = score < 0 ? -1 : 1;\n  const absoluteScore = Math.abs(score);\n  if (absoluteScore <= Score.One / 2) {\n    return 0;\n  }\n  if (scoreBetween(absoluteScore, Score.One / 2, Score.Two / 2)) {\n    return sign * Score.One;\n  }\n  if (scoreBetween(absoluteScore, Score.Two / 2, Score.Three / 2)) {\n    return sign * Score.Two;\n  }\n  if (scoreBetween(absoluteScore, Score.Three / 2, Score.Three * 1.5)) {\n    return sign * Score.Three;\n  }\n  if (scoreBetween(absoluteScore, Score.Three * 1.5, Score.Four / 2)) {\n    return sign * Score.Three * 2;\n  }\n  if (scoreBetween(absoluteScore, Score.Four / 2, Score.Five / 2)) {\n    return sign * Score.Four;\n  }\n  return sign * Score.Five;\n};\n","/** Constants. */\nimport {SEARCH_DEPTH, SPREAD_LIMIT} from '../constants/ai';\n\n/** Model. */\nimport Board from './board';\nimport Timer from './timer';\nimport SearchCache from './search-cache';\n\n/** Util. */\nimport {greaterThanOrEqualTo, lessThanOrEqualTo, equalTo} from '../utils/math';\nimport {nextRole} from '../utils/next';\n\n/** Types. */\nimport {SearchRecord, SearchStep} from '../types/search';\nimport {Role} from '../types/role';\nimport {Step} from '../types/board';\nimport {Score} from '../types/score';\n\nexport default class NegaMax {\n  searchCache: SearchCache = new SearchCache();\n  timer: Timer = new Timer();\n  board: Board = new Board();\n  leafCount: number = 0;\n  searchRecordCount: number = 0;\n  tooDeepCount: number = 0;\n  lowScoreCount: number = 0;\n  normalCount: number = 0;\n  callCount: number = 0;\n  alphaCount: number = 0;\n\n  constructor(board: Board) {\n    this.board = board;\n    this.reset();\n  }\n\n  reset() {\n    this.searchCache.reset();\n    this.timer.reset();\n  }\n\n  _getBestSearchRecord = (\n    depth: number,\n    alpha: number,\n    beta: number,\n    role: Role,\n    stepCount: number,\n    steps: Step[],\n    spread: number\n  ): SearchRecord => {\n    this.callCount++;\n    const currentSearchPoint = this.searchCache.get(\n      this.board.zobrist.hashCode\n    );\n    if (currentSearchPoint) {\n      const {record} = currentSearchPoint;\n      if (currentSearchPoint.depth >= depth) {\n        this.tooDeepCount++;\n        return {\n          boardScore: record.boardScore,\n          stepCount: stepCount + record.stepCount,\n          steps,\n        };\n      } else {\n        if (\n          greaterThanOrEqualTo(record.boardScore, Score.Four) ||\n          lessThanOrEqualTo(record.boardScore, -Score.Four)\n        ) {\n          // lowScoreCount++;\n          return record;\n        }\n      }\n    }\n\n    /**************\n     * TOUCH LEAF *\n     **************/\n    const boardScore = this.board.evaluateBoard(role);\n    const leaf = {boardScore, stepCount, steps};\n    if (\n      depth <= 0 ||\n      greaterThanOrEqualTo(boardScore, Score.Five) ||\n      lessThanOrEqualTo(boardScore, -Score.Five)\n    ) {\n      // leafCount++;\n      return leaf;\n    }\n\n    const isOnlyThrees =\n      this.board.stepCount > 10 ? stepCount > 1 : stepCount > 3;\n    const applyStarSpread = stepCount > 1; // Turn on starSpread after init.\n    let heuristicSteps = this.board.heuristicEvaluate(\n      role,\n      isOnlyThrees,\n      applyStarSpread\n    );\n    if (!heuristicSteps.length) {\n      // leafCount++;\n      return leaf;\n    }\n\n    /**********************\n     * BEST SEARCH RECORD *\n     **********************/\n    let bestSearchRecord = {boardScore: Score.Min, stepCount, steps};\n    for (const heuristicStep of heuristicSteps) {\n      this.alphaCount++;\n      this.board.placeChess(heuristicStep, role);\n      let [nextDepth, nextSpread] = [depth - 1, spread];\n      if (nextSpread < SPREAD_LIMIT) {\n        if (\n          (role === Role.Agent && heuristicStep.humanScore >= Score.Five) ||\n          (role === Role.Human && heuristicStep.agentScore >= Score.Five)\n        ) {\n          nextDepth += 2;\n          nextSpread++;\n        }\n      }\n\n      const nextSteps = steps.slice();\n      nextSteps.push(heuristicStep);\n\n      const searchRecord = this._getBestSearchRecord(\n        nextDepth,\n        -beta,\n        -alpha,\n        nextRole(role),\n        stepCount + 1,\n        nextSteps,\n        nextSpread\n      );\n\n      searchRecord.boardScore *= -1;\n      this.board.cleanChess(heuristicStep);\n\n      if (searchRecord.boardScore > bestSearchRecord.boardScore) {\n        bestSearchRecord = searchRecord;\n      }\n      alpha = Math.max(bestSearchRecord.boardScore, alpha);\n      if (greaterThanOrEqualTo(searchRecord.boardScore, beta)) {\n        searchRecord.boardScore = Score.Max - 1;\n        searchRecord.alphaBetaPrune = 1;\n        this.searchRecordCount++;\n        return searchRecord;\n      }\n    }\n    this.normalCount++;\n    this.searchCache.set(this.board.zobrist.hashCode, bestSearchRecord, depth);\n    return bestSearchRecord;\n  };\n\n  _getAlpha = (\n    heuristicSteps: Step[],\n    role: Role,\n    depth: number,\n    alpha: number,\n    beta: number\n  ): number => {\n    this.board.optionalSteps = [];\n    for (const heuristicStep of heuristicSteps) {\n      this.board.placeChess(heuristicStep, role);\n      const steps = [heuristicStep];\n      const bestSearchRecord = this._getBestSearchRecord(\n        depth - 1,\n        -beta,\n        -alpha,\n        nextRole(role),\n        1,\n        steps.slice(),\n        0\n      );\n\n      bestSearchRecord.boardScore *= -1;\n      alpha = Math.max(alpha, bestSearchRecord.boardScore);\n\n      this.board.cleanChess(heuristicStep);\n      heuristicStep.record = bestSearchRecord;\n\n      if (this.timer.expired) {\n        console.log('timeout...');\n        break;\n      }\n    }\n    return alpha;\n  };\n\n  _depthSearch = (\n    heuristicSteps: Step[],\n    role: Role,\n    searchDepth: number\n  ): SearchStep => {\n    this.timer.reset();\n    this.searchCache.reset();\n    // const start = (+ new Date());\n    for (let depth = 2; depth <= searchDepth; depth += 2) {\n      // Remove a LOSS point per traverse.\n      // This call will update the heuristicSteps.\n      const bestScore = this._getAlpha(\n        heuristicSteps,\n        role,\n        depth,\n        Score.Min,\n        Score.Max\n      );\n      // Win point!\n      if (greaterThanOrEqualTo(bestScore, Score.Five)) {\n        break;\n      }\n    }\n\n    const heuristicSearchRecords: SearchStep[] = heuristicSteps.map(\n      (heuristicStep) => ({\n        point: heuristicStep.point,\n        boardScore: heuristicStep.record!.boardScore,\n        stepCount: heuristicStep.record!.stepCount,\n        steps: heuristicStep.record!.steps,\n        timer: this.timer.consumed,\n      })\n    );\n\n    heuristicSearchRecords.sort((heuristicStepA, heuristicStepB) => {\n      if (equalTo(heuristicStepA.boardScore, heuristicStepB.boardScore)) {\n        if (heuristicStepA.boardScore >= 0) {\n          // In advantage! Try cut the steps.\n          if (heuristicStepA.stepCount !== heuristicStepB.stepCount) {\n            return heuristicStepA.stepCount - heuristicStepB.stepCount;\n          } else {\n            return heuristicStepB.boardScore - heuristicStepA.boardScore;\n          }\n        } else {\n          // In disadvantage! Try extend the steps.\n          if (heuristicStepA.stepCount !== heuristicStepB.stepCount) {\n            return heuristicStepB.stepCount - heuristicStepA.stepCount;\n          } else {\n            return heuristicStepB.boardScore - heuristicStepA.boardScore;\n          }\n        }\n      } else {\n        return heuristicStepB.boardScore - heuristicStepA.boardScore;\n      }\n    });\n    // console.log(`placeCount: ${this.board.placeCount}`);\n    // console.log(`leafCount: ${this.leafCount}`);\n    // console.log(`searchRecordCount: ${this.searchRecordCount}`);\n    // console.log(`tooDeepCount: ${this.tooDeepCount}`);\n    // console.log(`lowScoreCount: ${this.lowScoreCount}`);\n    // console.log(`normalCount: ${this.normalCount}`);\n    // console.log(`callCount: ${this.callCount}`);\n    // console.log(`alphaCount: ${this.alphaCount}`);\n    return heuristicSearchRecords[0];\n  };\n\n  getSearchStep = (\n    currentRole: Role | undefined,\n    searchDepth: number | undefined\n  ): SearchStep => {\n    currentRole = currentRole || Role.Agent;\n    searchDepth = searchDepth || SEARCH_DEPTH;\n    const heuristicSteps = this.board.heuristicEvaluate(\n      currentRole,\n      false,\n      false\n    );\n    return this._depthSearch(heuristicSteps, currentRole, searchDepth);\n  };\n}\n","/**********************\n * Provider Component *\n **********************/\nimport React, {Component, ReactElement} from 'react';\n\n/** Models. */\nimport Board from '../../models/board';\nimport NegaMax from '../../models/negamax';\n\n/** Types. */\nimport {Winner} from '../../types/board';\nimport {\n  GameMode,\n  GameState,\n  GameStatus,\n  AiLevel,\n  GameMutationState,\n} from '../../types/game';\nimport {Role} from '../../types/role';\nimport {SearchStep} from '../../types/search';\n\n/** Utils. */\nimport {getWinner} from '../../utils/control';\nimport {buildGameState, buildStep} from '../../utils/generator';\nimport {nextRole} from '../../utils/next';\n\n/** Component. */\nimport Context from './Context';\n\ninterface ProviderProps {\n  children: ReactElement;\n}\n\ninterface ProviderState extends GameState {\n  dialogOpen: boolean;\n  closeDialog: () => void;\n  openDialog: () => void;\n  placeChess: (row: number, col: number) => void;\n  startNewGame: (mode: GameMode, firstHand: Role, aiLevel: AiLevel) => void;\n}\n\nexport default class Provider extends Component<ProviderProps, ProviderState> {\n  state = {\n    ...buildGameState(),\n    dialogOpen: false,\n    closeDialog: (): void => this._closeDialog(),\n    openDialog: (): void => this._openDialog(),\n    placeChess: (row: number, col: number): void =>\n      this._humanPlaceChess(row, col),\n    startNewGame: (mode: GameMode, firstHand: Role, aiLevel: AiLevel): void =>\n      this._initNewGame(mode, firstHand, aiLevel),\n    stepBackward: (): void => this._stepBackward(),\n    stepForward: (): void => this._stepForward(),\n  };\n\n  _initNewGame(mode: GameMode, firstHand: Role, aiLevel: AiLevel): void {\n    this.setState(\n      {\n        ...buildGameState(),\n        aiLevel,\n        firstHand,\n        mode,\n        role: firstHand,\n        status: GameStatus.Open,\n      },\n      () => {\n        if (mode === GameMode.VsAgent && firstHand === Role.Agent) {\n          this._agentPlaceChess();\n        }\n      }\n    );\n  }\n\n  _closeDialog(): void {\n    this.setState({dialogOpen: false});\n  }\n\n  _openDialog(): void {\n    this.setState({dialogOpen: true});\n  }\n\n  _updateState(\n    board: Board,\n    role: Role,\n    aiThinking: boolean = false,\n    aiTimer: number = 0,\n    aiScore: number = 0\n  ): void {\n    const winner: Winner = getWinner(board);\n    let status: GameStatus = GameStatus.Open;\n    if (winner.role !== Role.Empty) {\n      status = GameStatus.Over;\n      board.updateWinPoints(winner.winPoints);\n      aiThinking = false;\n    }\n    const nextState: GameMutationState = {\n      aiScore,\n      aiTimer,\n      aiThinking,\n      board,\n      role,\n      status,\n      winner,\n    };\n    this.setState({...nextState}, () => {\n      if (\n        this.state.mode === GameMode.VsAgent &&\n        role === Role.Agent &&\n        winner.role === Role.Empty\n      ) {\n        this._agentPlaceChess();\n      }\n    });\n  }\n\n  _agentPlaceChess(): void {\n    setTimeout(() => {\n      const {board, aiLevel} = this.state;\n      const negamax = new NegaMax(board);\n      const searchStep: SearchStep = negamax.getSearchStep(Role.Agent, aiLevel);\n      const {timer, boardScore, point}: SearchStep = searchStep;\n      const [aiRow, aiCol] = point;\n      board.placeChess(buildStep(aiRow, aiCol), Role.Agent);\n      this._updateState(board, Role.Human, false, timer, boardScore);\n    }, 500);\n  }\n\n  _humanPlaceChess(row: number, col: number): void {\n    const {board, role, mode} = this.state;\n    if (mode === GameMode.VsAgent) {\n      board.placeChess(buildStep(row, col), role);\n      this._updateState(board, Role.Agent, true);\n    }\n\n    if (mode === GameMode.VsHuman) {\n      board.placeChess(buildStep(row, col), role);\n      this._updateState(board, nextRole(role));\n    }\n  }\n\n  _stepBackward(): void {\n    const {board, role, mode} = this.state;\n    board.stepBackward(mode);\n    this._updateState(board, role);\n  }\n\n  _stepForward(): void {\n    const {board, role, mode} = this.state;\n    board.stepForward(mode);\n    this._updateState(board, role);\n  }\n\n  render(): ReactElement {\n    return (\n      <Context.Provider value={this.state}>\n        {this.props.children}\n      </Context.Provider>\n    );\n  }\n}\n","/******************\n * Starting Point *\n ******************/\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './components/app/App';\n\n/** Cache. */\nimport * as serviceWorker from './serviceWorker';\n\n/** Material UI. */\nimport {MuiThemeProvider} from '@material-ui/core/styles';\nimport theme from './constants/theme';\nimport Provider from './components/provider/Provider';\n\nReactDOM.render(\n  <MuiThemeProvider theme={theme}>\n    <Provider>\n      <App />\n    </Provider>\n  </MuiThemeProvider>,\n  document.getElementById('root')\n);\n\nprocess.env.NODE_ENV === 'development'\n  ? serviceWorker.unregister()\n  : serviceWorker.register();\n"],"sourceRoot":""}